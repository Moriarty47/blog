import{_ as t,p as e,q as l,a0 as r}from"./framework-5411b43d.js";const i="/blog/assets/render-d4bb07b2.png",d={},a=r('<h2 id="服务端渲染-server-side-render" tabindex="-1"><a class="header-anchor" href="#服务端渲染-server-side-render" aria-hidden="true">#</a> 服务端渲染(Server Side Render)</h2><ul><li>客户端渲染：请求 HTML，CSS，JS 并发生数据接口请求，渲染 HTML 页面</li><li>服务端渲染： <ul><li>核心：减少请求，减少白屏数据，对 SEO 友好</li><li>所有模板等资源都存储在服务端</li><li>内网机器拉取数据更快</li><li>一个 HTML 返回所有数据</li></ul></li></ul><center><p><img src="'+i+'" alt="浏览器与服务端的交互流程"></p><p>浏览器与服务端的交互流程</p></center><table-center><table><thead><tr><th></th><th>客户端渲染</th><th>服务端渲染</th></tr></thead><tbody><tr><td>请求</td><td>多个请求(HTML，数据等)</td><td>一个请求</td></tr><tr><td>加载过程</td><td>HTML 和数据串行加载</td><td>一个请求返回 HTML 和数据</td></tr><tr><td>渲染</td><td>前端渲染</td><td>服务端渲染</td></tr><tr><td>可交互</td><td colspan="2">图片等静态资源加载完成，JS 逻辑执行完成可交互</td></tr></tbody></table></table-center><h3 id="ssr-实现思路" tabindex="-1"><a class="header-anchor" href="#ssr-实现思路" aria-hidden="true">#</a> SSR 实现思路</h3><ul><li><p>服务端</p><ul><li>使用 react-dom/server 的 renderToString 方法将 React 组件渲染出字符串</li><li>服务端路由返回对应的模板</li></ul></li><li><p>客户端</p><ul><li>打包出针对服务端的组件</li></ul></li></ul><h3 id="ssr-问题" tabindex="-1"><a class="header-anchor" href="#ssr-问题" aria-hidden="true">#</a> SSR 问题</h3><ul><li>浏览器全局变量(Node.js 中没有 document，window) <ul><li>组件适配：将不兼容的组件根据打包环境进行适配</li><li>请求适配：将 fetch 或者 ajax 发送请求的写法改成 isomorphic-fetch 或者 axios</li></ul></li><li>样式问题(Node.js 无法解析 CSS) <ul><li>服务端打包通过 ignore-loader 忽略掉 CSS 解析</li><li>将 style-loader 替换成 isomorphic-style-loader</li><li>不显示 <ul><li>使用打包出来的浏览器端 html 文件</li><li>设置占位符，动态插入组件</li></ul></li></ul></li></ul>',8),s=[a];function o(n,c){return e(),l("div",null,s)}const u=t(d,[["render",o],["__file","ssr.html.vue"]]);export{u as default};
